# 분류분석
# 의사결정 트리(Decision Tree)

# 1 날씨 관련 요인 변수
# 1-1 수식(Formula) 생성
> install.packages("party")
> library(party)
> library(datasets)
> str(airquality)
'data.frame':	153 obs. of  6 variables:
 $ Ozone  : int  41 36 12 18 NA 28 23 19 8 NA ...
 
 # 온도에 미치는 변수를 알아보기 위해서 Temp(온도) 변수를
 # 반응변수(종속변수)로 지정하고
 # Solar.R(태영광), Wind(바람), Ozone(오존 수치)을 
 # 설명변수(독립변수)로 지정하여 식을 생성
 # 7) (첫번째), Ozone <= 65(두번째),  criterion = 0.971(세번째), statistic = 6.691(네번째)
 # 첫번째 번호는 반응변수(종속변수)에 대해 설명변수(독립변수)가 영향을 미치는 중요 변수의 척도를 나타냄
 # 수치가 작을수록 영향을 미치는 정도가 높고, 순서는 분기되는 순서를 의미함
 # 두번째는 의사결정 트리의 노드명, 노드 번호 뒤에 "*" 기호가 오면 해당 노드가 마지막 노드
 # 그렇지 않으면 노드명 뒤에 해당 변수의 임계값이 조건식으로 나옴
 # 세번째는 노드이 분기 기준(criterion)이 되는 수치, criterion = 0.971이면 유의확률 p = 0.029(1-0.971)
 # 유의확률 p는 의사결정 트리에서 확인 할 수 있음(p 값은 유의수준 0.05보다 작다)
 # 네번째는 반응변수(종속변수)의 통계량(statistic) 표시됨
 # 마지막 노드이거나 또는 다른 분기 기준이 있는 경우에는 세번째와 네번째 수치는 표시되지 않음
> formula <-  Temp ~ Solar.R +  Wind + Ozone
> air_ctree <- ctree(formula, data=airquality)
> air_ctree

	 Conditional inference tree with 5 terminal nodes

Response:  Temp 
Inputs:  Solar.R, Wind, Ozone 
Number of observations:  153 

1) Ozone <= 37; criterion = 1, statistic = 56.086
  2) Wind <= 15.5; criterion = 0.993, statistic = 9.387
    3) Ozone <= 19; criterion = 0.964, statistic = 6.299
      4)*  weights = 29 
    3) Ozone > 19
      5)*  weights = 69 
  2) Wind > 15.5
    6)*  weights = 7 
1) Ozone > 37
  7) Ozone <= 65; criterion = 0.971, statistic = 6.691
    8)*  weights = 22 
  7) Ozone > 65
    9)*  weights = 26 
    
 # 1-2 분류분석 결과 시각화
> plot(air_ctree)
>

# 1-3 기술통계량 
> result <- subset(airquality, Ozone <= 37 & Wind > 15.5)
> summary(result$Temp)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   57.0    61.0    63.0    65.2    72.0    73.0 
> 


# 2 고속도로 주행거리에 미치는 영향변수
# 반응변수 hwy(gallon 당 고속도로 주행거리)
# 설명변수 mode(모델), disp(엔진크기), cy(실린터 수), drv(구동방식)

# 2-1 데이터 셋 
> library(ggplot2) 
> data(mpg)

# 2-2 학습데이터와 검정데이터 생성
# 120개 표본 샘플링
# train : 학습데이터
# test : 검증데이터
> t <- sample(1:nrow(mpg), 120) 
> train <- mpg[t, ] 
> test <- mpg[-t, ]  
> dim(train)
[1] 120  11
> 
> dim(test)
[1] 114  11
> 

# 2-3 수식 작성과 분류모델 생성
# 구동방식 요인형 변환
# 수식 작성
# tree 모델 생성
# tree 모델 시각화
> test$drv <- factor(test$drv)
> formula <- hwy ~ displ + cyl + drv
> hwy_ctree <- ctree(formula, data=test) 
> plot(hwy_ctree) 
>

# 3 날씨 데이터를 이용하여 비 유무 예측 
# 3-1 데이터 셋
> install.packages("rpart")
> library(rpart)
> install.packages("rpart.plot")
> library(rpart.plot)
> setwd("C:/workspace/rstudio-master/data")
> weather = read.csv("017weather.csv", stringsAsFactors = F)
> str(weather)
'data.frame':	366 obs. of  15 variables:
 $ Date         : chr  "2018-11-01" "2018-11-02" "2018-11-03" "2018-11-04" ...
 $ MinTemp      : num  8 14 13.7 13.3 7.6 6.2 6.1 8.3 8.8 8.4 ...
 $ MaxTemp      : num  24.3 26.9 23.4 15.5 16.1 16.9 18.2 17 19.5 22.8 ...
 $ Rainfall     : num  0 3.6 3.6 39.8 2.8 0 0.2 0 0 16.2 ...
 $ Sunshine     : num  6.3 9.7 3.3 9.1 10.6 8.2 8.4 4.6 4.1 7.7 ...
 $ WindGustDir  : chr  "NW" "ENE" "NW" "NW" ...
 $ WindGustSpeed: int  30 39 85 54 50 44 43 41 48 31 ...
 $ WindDir      : chr  "NW" "W" "NNE" "W" ...
 $ WindSpeed    : int  20 17 6 24 28 24 26 24 17 6 ...
 $ Humidity     : int  29 36 69 56 49 57 47 57 48 32 ...
 $ Pressure     : num  1015 1008 1007 1007 1018 ...
 $ Cloud        : int  7 3 7 7 7 5 6 7 7 1 ...
 $ Temp         : num  23.6 25.7 20.2 14.1 15.4 14.8 17.3 15.5 18.9 21.7 ...
 $ RainToday    : chr  "No" "Yes" "Yes" "Yes" ...
 $ RainTomorrow : chr  "Yes" "Yes" "Yes" "Yes" ...
> names(weather)
 [1] "Date"          "MinTemp"       "MaxTemp"       "Rainfall"      "Sunshine"      "WindGustDir"   "WindGustSpeed"
 [8] "WindDir"       "WindSpeed"     "Humidity"      "Pressure"      "Cloud"         "Temp"          "RainToday"    
[15] "RainTomorrow" 
> head(weather)
        Date MinTemp MaxTemp Rainfall Sunshine WindGustDir WindGustSpeed WindDir WindSpeed Humidity Pressure Cloud Temp
1 2018-11-01     8.0    24.3      0.0      6.3          NW            30      NW        20       29   1015.0     7 23.6
2 2018-11-02    14.0    26.9      3.6      9.7         ENE            39       W        17       36   1008.4     3 25.7

# 3-2 분류분석 데이터 가져오기
> weather.df <- rpart(RainTomorrow ~ ., 
+ data=weather[, c(-1,-14)], cp=0.01)
> weather.df


# 3-3 분류분석 시각화
# 트리 프레임 보임
# 텍스트 추가
# post : 타원제공(rpart 패키지 제공) 
> X11()
> plot(weather.df)
> text(weather.df, use.n=T, cex=0.7)
> post(weather.df, file="")
> rpart.plot(weather.df)
> 

# 3-4 예측치 생성과 코딩 변경
> weather_pred <- predict(weather.df, weather)
> weather_pred
           No        Yes
1   0.9686099 0.03139013
2   0.8648649 0.13513514

# 3-5 y의 범주로 코딩 변환
# Yes(0.5이상), No(0.5 미만)
# 비 유무를 0 ~ 1 사이의 확률값으로 예측
# 0.5 이상이면 비가 오는 경우
# 0.5미만이면 비가 오지 않은 경우로 범주화하여 코딩 변경
> weather_pred2 <- ifelse(weather_pred[,2] >= 0.5, 'Yes', 'No' )
> table(weather_pred2, weather$RainTomorrow)
             
weather_pred2  No Yes
          No  278  16
          Yes  22  50

# 3-6 모델 평가
# 89% 분류정확도
> (278+50) / nrow(weather)
[1] 0.8961749
> 
