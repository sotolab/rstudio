# 회귀분석

# 1 다중 회귀 분석
# 1-1 변수 모델링
> y = product$제품_만족도
> x1 = product$제품_친밀도
> x2 = product$제품_적절성
> df <- data.frame(x1, x2, y)
> 

# 1-2 다중 회귀분석
# 절편 x1 : 0.0959, 기울기 x2 : 0.6852
> result.lm <- lm(formula = y ~x1 + x2, data = df)
> result.lm

Call:
lm(formula = y ~ x1 + x2, data = df)

Coefficients:
(Intercept)           x1           x2  
    0.66731      0.09593      0.68522  

> 

# 1-3 다중 공선성 문제 확인
# vif : 분산팽창요인(VIF)
# VIF 값이 10이상이면 다중 공선성 문제를 의심해 볼 수 있음
> library(car)
필요한 패키지를 로딩중입니다: carData
> vif(result.lm)
      x1       x2 
1.331929 1.331929 

# 1-4 다중 회귀분석 결과 확인
# VIF는 10 이하이므로다중공선성 문제 없음
# DW(Durbin Watson): 잔차의 독립성 여부를 검증하기 위해 사용
# 2에 가까우면 에러들은 각각 독립이고, 이상이면 각각 독립이 아님
# 제품 적절성이 제품만족도에 미치는 영향은
# t = 15.684, p = < 2e - 16이고
# 제품친밀도가 제품만족도에 미치는 영향은
# t = 2.478, p = .014
# 제품의 적절성과 제품의 친밀도는 
# 모두 유의수준에서 제품만족도에 영향을 미친다고 볼 수 있음 -> 연구 가설 채택
# 유의수준 0.05보다 매우 작기 때문에 (0.05 이상이면 회귀선 모델 부적합) 제품만족도에 영향을 미침
# 회귀모형은 상관계수 R = .0598로 독립변수와 종속변수 간에 다소 높은 상관관계
# R2 = .594로 독립변수가 종속변수로 59.5%
# 회귀모형의 적합성은 F = 193.8 (p =< 2.2e-16)로 모형이 적합함
# 표준화된 계수의 베타(Beta) 값을 토대로 '제품적절성'이 0.685로 
# 가장 높은 수치를 나타냈기 때문에 독립변수 중에서 제품적절성이 
# 제품만족도에 가장 큰 영향력을 줌
> summary(result.lm)

Call:
lm(formula = y ~ x1 + x2, data = df)

Residuals:
     Min       1Q   Median       3Q      Max 
-2.01076 -0.22961 -0.01076  0.20809  1.20809 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept)  0.66731    0.13094   5.096 6.65e-07 ***
x1           0.09593    0.03871   2.478   0.0138 *  
x2           0.68522    0.04369  15.684  < 2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.5278 on 261 degrees of freedom
Multiple R-squared:  0.5975,	Adjusted R-squared:  0.5945 
F-statistic: 193.8 on 2 and 261 DF,  p-value: < 2.2e-16
> 

# 2 로지스틱 회귀분석
# 날씨 관련 요인 변수로 비(rain) 유무 예측
# 2-1 데이터 셋
> setwd("C:/workspace/rstudio-master/data")
> weather = read.csv("017weather.csv", stringsAsFactors = F)
> dim(weather)
[1] 366  15
> head(weather)
        Date MinTemp MaxTemp Rainfall Sunshine WindGustDir WindGustSpeed WindDir WindSpeed Humidity Pressure
1 2018-11-01     8.0    24.3      0.0      6.3          NW            30      NW        20       29   1015.0
2 2018-11-02    14.0    26.9      3.6      9.7         ENE            39       W        17       36   1008.4
3 2018-11-03    13.7    23.4      3.6      3.3          NW            85     NNE         6       69   1007.2
4 2018-11-04    13.3    15.5     39.8      9.1          NW            54       W        24       56   1007.0
5 2018-11-05     7.6    16.1      2.8     10.6         SSE            50     ESE        28       49   1018.5
6 2018-11-06     6.2    16.9      0.0      8.2          SE            44       E        24       57   1021.7
  Cloud Temp RainToday RainTomorrow
1     7 23.6        No          Yes
2     3 25.7       Yes          Yes
3     7 20.2       Yes          Yes
4     7 14.1       Yes          Yes
5     7 15.4       Yes           No
6     5 14.8        No           No
> str(weather)
'data.frame':	366 obs. of  15 variables:

# 2-2 변수 선택과 더미 변수 생성
# 분석에 필요한 x,y 변수를 결정하고, y(독립변수)변수를 대상으로 더미 변수 생성
> weather_df <- weather[, c(-1, -6, -8, -14)]
> str(weather_df)
'data.frame':	366 obs. of  11 variables:
 $ MinTemp      : num  8 14 13.7 13.3 7.6 6.2 6.1 8.3 8.8 8.4 ...
> weather_df$RainTomorrow[weather_df$RainTomorrow=='Yes'] <- 1
> weather_df$RainTomorrow[weather_df$RainTomorrow=='No'] <- 0
> weather_df$RainTomorrow <- as.numeric(weather_df$RainTomorrow)
> head(weather_df)
  MinTemp MaxTemp Rainfall Sunshine WindGustSpeed WindSpeed Humidity Pressure Cloud Temp RainTomorrow
1     8.0    24.3      0.0      6.3            30        20       29   1015.0     7 23.6            1
 
 # 2-3 학습데이터와 검정데이터 생성(7:3)
 > idx <- sample(1:nrow(weather_df), nrow(weather_df)*0.7)
> train <- weather_df[idx, ]
> test <- weather_df[-idx, ]

# 2-4 로지스틱 회귀모델 생성
# glm : 학급데이터(train)를 이용하여 로지스틱 회귀모델을 생성
# family "binomial은 y 변수가 이항형인 경우 지정하는 속성값
> weater_model <- glm(RainTomorrow ~ ., data = train, family = 'binomial')
> weater_model 

Call:  glm(formula = RainTomorrow ~ ., family = "binomial", data = train)

Coefficients:
  (Intercept)        MinTemp        MaxTemp       Rainfall       Sunshine  WindGustSpeed      WindSpeed  
     90.67784       -0.13387        0.01435        0.02077       -0.31424        0.07086       -0.01948  
     Humidity       Pressure          Cloud           Temp  
      0.06318       -0.09943        0.23686        0.24352  

Degrees of Freedom: 255 Total (i.e. Null);  245 Residual
Null Deviance:	    241.1 
Residual Deviance: 129.9 	AIC: 151.9
> summary(weater_model) 

# 2-5 로지스틱  회귀모델 예측치 생성  
# newdata=test : 새로운 데이터 셋, type="response" : 0~1 확률값으로 예측 
# 1에 가까울수록 비가 올 확률이 높음
> pred <- predict(weater_model, newdata=test, type="response")  
> pred 
           2            8            9           14           20           21           22           23 
0.0853747049 0.1194341856 0.3034650382 0.0623367217 0.0403283959 0.6082817825 0.7279233328 0.7982245238 
          24           26           28           30           31           33           40           43 
> summary(pred)
> str(pred)

# 2-6 시그모이드
# pred 시그모이드 함수로 비 유무 판단( 0.5 기준)
# 예측치 : 0과 1로 변환(0.5)
# ifelse 이용하여 예측치의 벡터변수(pred)를 입력으로 
# 이항형의 벡터 변수(result_pred)를 생성함
> result_pred <- ifelse(pred >= 0.5, 1, 0)
> result_pred
> table(result_pred)
result_pred
 0  1 
95 15 

# 모델 평가(분류정확도) 
# test는 램덤하게 선정되기 때문에 분류정확도는 사용자마다 다를 수 있음
> table(result_pred, test$RainTomorrow)
result_pred  0  1
          0 84 11
          1  6  9
> (84 + 11) / nrow(test) # 0.8727273 = 87%
[1] 0.8636364
>

# ROC Curve 모델 평가
# 왼쪽 상단의 계단 모양의 빈 공백만큼이 분류정확도에서 오분류(missing)를 나타냄
> install.packages("ROCR")
> library(ROCR)
> pr <- prediction(pred, test$RainTomorrow)
> prf <- performance(pr, measure = "tpr", x.measure = "fpr")
> plot(prf)
> 
