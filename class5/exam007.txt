# 연관분석

# 1 연관분석
# 1-1 트랜잭션 객체 생성
> install.packages("arules")
> library(arules)
> setwd("C:/workspace/rstudio-master/data")
> tran<- read.transactions("018tran.txt", format="basket", sep=",")
> tran
transactions in sparse format with
 6 transactions (rows) and
 5 items (columns)
 
> inspect(tran)
    items           
[1] {라면,맥주,우유}
[2] {고기,라면,우유}
[3] {고기,과일,라면}
[4] {고기,맥주,우유}
[5] {고기,라면,우유}
[6] {과일,우유}     
> 

# 1-2 규칙발견 1
# 지지도가 0.3이고 신뢰도가 0.1인 경우에는 16개의 규칙이 발견됨
> rule<- apriori(tran, parameter = list(supp=0.3, conf=0.1))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support
        0.1    0.1    1 none FALSE            TRUE       5     0.3
 minlen maxlen target  ext
      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 1 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[5 item(s), 6 transaction(s)] done [0.00s].
sorting and recoding items ... [5 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [16 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
> inspect(rule)
     lhs            rhs    support   confidence coverage  lift  count
[1]  {}          => {과일} 0.3333333 0.3333333  1.0000000 1.000 2    
[2]  {}          => {맥주} 0.3333333 0.3333333  1.0000000 1.000 2    
[3]  {}          => {고기} 0.6666667 0.6666667  1.0000000 1.000 4    
[4]  {}          => {라면} 0.6666667 0.6666667  1.0000000 1.000 4    
[5]  {}          => {우유} 0.8333333 0.8333333  1.0000000 1.000 5    
[6]  {맥주}      => {우유} 0.3333333 1.0000000  0.3333333 1.200 2    
[7]  {우유}      => {맥주} 0.3333333 0.4000000  0.8333333 1.200 2    
[8]  {고기}      => {라면} 0.5000000 0.7500000  0.6666667 1.125 3    
[9]  {라면}      => {고기} 0.5000000 0.7500000  0.6666667 1.125 3    
[10] {고기}      => {우유} 0.5000000 0.7500000  0.6666667 0.900 3    
[11] {우유}      => {고기} 0.5000000 0.6000000  0.8333333 0.900 3    
[12] {라면}      => {우유} 0.5000000 0.7500000  0.6666667 0.900 3    
[13] {우유}      => {라면} 0.5000000 0.6000000  0.8333333 0.900 3    
[14] {고기,라면} => {우유} 0.3333333 0.6666667  0.5000000 0.800 2    
[15] {고기,우유} => {라면} 0.3333333 0.6666667  0.5000000 1.000 2    
[16] {라면,우유} => {고기} 0.3333333 0.6666667  0.5000000 1.000 2    


# 1-3 규칙발견 2
# 지지도가 0.1이고 신뢰도가 0.1인 경우에는 35개의 규칙이 발견됨
> rule<- apriori(tran, parameter = list(supp=0.1, conf=0.1))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support
        0.1    0.1    1 none FALSE            TRUE       5     0.1
 minlen maxlen target  ext
      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 0 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[5 item(s), 6 transaction(s)] done [0.00s].
sorting and recoding items ... [5 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [35 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

# 맥주->고기 조합의 거래는 연관규칙 결과에서,
# [12] {맥주} => {고기} 0.1666667 0.5000000  0.3333333 0.750 1  
# [30] {라면,맥주} => {우유} 0.1666667 1.0000000  0.1666667 1.200 1   
# 맥주와 고기의 조합은 다른 거래에 비해서 거래 수가 비교적 적음(지지율이 낮음)
# [16] 맥주와 우유 0.33와 고기와 라면 0.5의 지지율에 비해서 휠씬 약한 조합
# 향상도가 0.75라는 것은 맥주와 고기가 서로 음의 상관관계라고 할 수 있음
# 이것은 맥주를 구해만 사람은 대체로 고기를 사지 않는다는 사실임
# 맥주와 고기는 구매의 관련성이 떨어지기 때문에 두 상품은 근거리에 두지 않아도 됨
# [30] {라면,맥주} => {우유} 조합은향상도(1.2)가 1 이상으로 나타났기 때문에 
# 두 상품 간의 상관성이 높다고 볼 수 있음

> inspect(rule)
     lhs            rhs    support   confidence coverage  lift  count
[1]  {}          => {과일} 0.3333333 0.3333333  1.0000000 1.000 2    
[2]  {}          => {맥주} 0.3333333 0.3333333  1.0000000 1.000 2    
[3]  {}          => {고기} 0.6666667 0.6666667  1.0000000 1.000 4    
[4]  {}          => {라면} 0.6666667 0.6666667  1.0000000 1.000 4    
[5]  {}          => {우유} 0.8333333 0.8333333  1.0000000 1.000 5    
[6]  {과일}      => {고기} 0.1666667 0.5000000  0.3333333 0.750 1    
[7]  {고기}      => {과일} 0.1666667 0.2500000  0.6666667 0.750 1    
[8]  {과일}      => {라면} 0.1666667 0.5000000  0.3333333 0.750 1    
[9]  {라면}      => {과일} 0.1666667 0.2500000  0.6666667 0.750 1    
[10] {과일}      => {우유} 0.1666667 0.5000000  0.3333333 0.600 1    
[11] {우유}      => {과일} 0.1666667 0.2000000  0.8333333 0.600 1    
[12] {맥주}      => {고기} 0.1666667 0.5000000  0.3333333 0.750 1    
...   
[16] {맥주}      => {우유} 0.3333333 1.0000000  0.3333333 1.200 2 
...
[18] {고기}      => {라면} 0.5000000 0.7500000  0.6666667 1.125 3    
...
[30] {라면,맥주} => {우유} 0.1666667 1.0000000  0.1666667 1.200 1    
...  

# 1-4 트랜잭션 생성
# read.transactions 트랜잭션 객체 생성 함수
# format: 트랜잭션 데이터 셋의 형식 지정
# single: 트랜잭션 구분자에 의해서 상품이 대응된 경우
# basket: 여러 개의 상품으로 구성된 경우(transaction ID없이 여러 상품으로만 구성된 경우)
# sep: 각 상품을 구분하는 구분자 지정
# cols: single인 경우 읽을 칼럼 수 지정
# rm.duplicates: 중복 트랜잭션 상품 제거
# encoding: 데이터 셋의 인코딩 지정
> setwd("C:/workspace/rstudio-master/data")
> stran <- read.transactions("019items.txt",format="single",cols=c(1,2)) 
> inspect(stran)
    items         transactionID
[1] {item1}       trans1       
[2] {item1,item2} trans2       
>

# 상품이 콤마로 구분되어 있으며, 중복된 트랜잭션이 존재하는 경우 해당 트랜잭션을 제거
> stran2<- read.transactions("020single_format.csv", format="single", sep=",", 
+ cols=c(1,2), rm.duplicates=T)

> stran2
transactions in sparse format with
 248 transactions (rows) and
 68 items (columns)
 
> inspect(stran2)

# 1-5 요약통계량
# sizes의 첫 줄은 item수, 두 번째 줄은 transaction 수
# item 수가 1개로 구성된 transaction 수가 12개라는 의미
# 248개 transaction에 대한 기술통계 제공
> summary(stran2)
transactions as itemMatrix in sparse format with
 248 rows (elements/itemsets/transactions) and
 68 columns (items) and a density of 0.06949715 

most frequent items:
10001519 10003364 10003373 10093119 10003332  (Other) 
     186      183       91       84       71      557 

element (itemset/transaction) length distribution:
sizes
  1   2   3   4   5   6   7   8 
 12  25  16  20 119  12  37   7 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   4.000   5.000   4.726   5.000   8.000 

includes extended item information - examples:
    labels
1 10000005
2 10000012
3 10000085

includes extended transaction information - examples:
    transactionID
1 2010-01-01-0823
2 2010-01-02-0822
3 2010-01-03-0822

> inspect(stran2)

# 1-6 규칙 생성
# 지지율 0.1, 신뢰도 0.8 
> astran2 <- apriori(stran2) 
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target
        0.8    0.1    1 none FALSE            TRUE       5     0.1      1     10  rules
  ext
 TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 24 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[68 item(s), 248 transaction(s)] done [0.00s].
sorting and recoding items ... [12 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 5 done [0.00s].
writing ... [102 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

> astran2
set of 102 rules 

> attributes(astran2)
$quality
      support confidence  coverage     lift count
1   0.1088710  0.8181818 0.1330645 1.108793    27
2   0.1088710  0.8181818 0.1330645 1.090909    27
3   0.1330645  1.0000000 0.1330645 1.355191    33
4   0.1330645  1.0000000 0.1330645 1.333333    33
...
101 0.1048387  1.0000000 0.1048387 2.952381    26
102 0.1048387  1.0000000 0.1048387 4.509091    26
...
$class
[1] "rules"
attr(,"package")
[1] "arules"

> inspect(astran2)
      lhs                                      rhs        support   confidence coverage 
[1]   {10003349}                            => {10003364} 0.1088710 0.8181818  0.1330645
[2]   {10003349}                            => {10001519} 0.1088710 0.8181818  0.1330645
[3]   {10202857}                            => {10003364} 0.1330645 1.0000000  0.1330645
...
[102] 4.509091  26  

# 1-7 상위 6개의 향상도(lift)를 내림차순
> inspect(head(sort(astran2, by="lift")))
    lhs                                      rhs        support   confidence coverage 
[1] {10003332,10003373}                   => {10003374} 0.1330645 0.9705882  0.1370968
[2] {10003332,10003364,10003373}          => {10003374} 0.1330645 0.9705882  0.1370968
[3] {10001519,10003332,10003373}          => {10003374} 0.1330645 0.9705882  0.1370968
[4] {10001519,10003332,10003364,10003373} => {10003374} 0.1330645 0.9705882  0.1370968
[5] {10003332,10093119}                   => {10003375} 0.1048387 1.0000000  0.1048387
[6] {10003332,10003364,10093119}          => {10003375} 0.1048387 1.0000000  0.1048387
    lift     count
[1] 4.912365 33   
[2] 4.912365 33   
[3] 4.912365 33   
[4] 4.912365 33   
[5] 4.509091 26   
[6] 4.509091 26   
> 


# 2 연관규칙 시각화
# adlt 데이터 셋은 성인을 대상으로 인구 소득에 관한 설문 조사 데이터

# 2-1 데이터 셋
> data(Adult) 

# 48842 트랜잭션
> str(Adult)
Formal class 'transactions' [package "arules"] with 3 slots
  ..@ data       :Formal class 'ngCMatrix' [package "Matrix"] with 5 slots
  .. .. ..@ i       : int [1:612200] 1 10 25 32 35 50 59 61 63 65 ...
  .. .. ..@ p       : int [1:48843] 0 13 26 39 52 65 78 91 104 117 ...
  .. .. ..@ Dim     : int [1:2] 115 48842
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ factors : list()
  ..@ itemInfo   :'data.frame':	115 obs. of  3 variables:
  .. ..$ labels   : chr [1:115] "age=Young" "age=Middle-aged" "age=Senior" "age=Old" ...
  .. ..$ variables: Factor w/ 13 levels "age","capital-gain",..: 1 1 1 1 13 13 13 13 13 13 ...
  .. ..$ levels   : Factor w/ 112 levels "10th","11th",..: 111 63 92 69 30 54 65 82 90 91 ...
  ..@ itemsetInfo:'data.frame':	48842 obs. of  1 variable:
  .. ..$ transactionID: chr [1:48842] "1" "2" "3" "4" ...
  
> Adult
transactions in sparse format with
 48842 transactions (rows) and
 115 items (columns)
 
# 2-2 AdultUCI 데이터 셋
# 전체 48,842개의 관측치와 15개 변수로 구성된 데이터프레임 
> data(AdultUCI)
> str(AdultUCI)
'data.frame':	48842 obs. of  15 variables:
 $ age           : int  39 50 38 53 28 37 49 52 31 42 ...
 $ workclass     : Factor w/ 8 levels "Federal-gov",..: 7 6 4 4 4 4 4 6 4 4 ...
 $ fnlwgt        : int  77516 83311 215646 234721 338409 284582 160187 209642 45781 159449 ...
 $ education     : Ord.factor w/ 16 levels "Preschool"<"1st-4th"<..: 14 14 9 7 14 15 5 9 15 14 ...
 $ education-num : int  13 13 9 7 13 14 5 9 14 13 ...
 $ marital-status: Factor w/ 7 levels "Divorced","Married-AF-spouse",..: 5 3 1 3 3 3 4 3 5 3 ...
 $ occupation    : Factor w/ 14 levels "Adm-clerical",..: 1 4 6 6 10 4 8 4 10 4 ...
 $ relationship  : Factor w/ 6 levels "Husband","Not-in-family",..: 2 1 2 1 6 6 2 1 2 1 ...
 $ race          : Factor w/ 5 levels "Amer-Indian-Eskimo",..: 5 5 5 3 3 5 3 5 5 5 ...
 $ sex           : Factor w/ 2 levels "Female","Male": 2 2 2 2 1 1 1 2 1 2 ...
 $ capital-gain  : int  2174 0 0 0 0 0 0 0 14084 5178 ...
 $ capital-loss  : int  0 0 0 0 0 0 0 0 0 0 ...
 $ hours-per-week: int  40 13 40 40 40 40 16 45 50 40 ...
 $ native-country: Factor w/ 41 levels "Cambodia","Canada",..: 39 39 39 39 5 39 23 39 39 39 ...
 $ income        : Ord.factor w/ 2 levels "small"<"large": 1 1 1 1 1 1 1 2 2 2 ...

# 2-3 데이터셋 생성
> adult <- as(Adult, 'data.frame')
> str(adult)  
'data.frame':	48842 obs. of  2 variables:
 $ items        : Factor w/ 26771 levels "{age=Middle-aged,education=10th,marital-status=Divorced,relationship=Not-in-family,race=White,sex=Female,capita"| __truncated__,..: 12330 20981 6200 16289 5154 8308 16981 21198 8525 4929 ...
 $ transactionID: chr  "1" "2" "3" "4" ...
> head(adult)
                                                                                                                                                                                                                                                                     items
1      {age=Middle-aged,workclass=State-gov,education=Bachelors,marital-status=Never-married,occupation=Adm-clerical,relationship=Not-in-family,race=White,sex=Male,capital-gain=Low,capital-loss=None,hours-per-week=Full-time,native-country=United-States,income=small}
...
  transactionID
1             1
2             2
3             3
4             4
5             5
6             6

# 2-4 요약통계량
> summary(Adult)
transactions as itemMatrix in sparse format with
 48842 rows (elements/itemsets/transactions) and
 115 columns (items) and a density of 0.1089939 

most frequent items:
           capital-loss=None            capital-gain=None native-country=United-States 
                       46560                        44807                        43832 
                  race=White            workclass=Private                      (Other) 
                       41762                        33906                       401333 

element (itemset/transaction) length distribution:
sizes
    9    10    11    12    13 
   19   971  2067 15623 30162 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   9.00   12.00   13.00   12.53   13.00   13.00 

includes extended item information - examples:
           labels variables      levels
1       age=Young       age       Young
2 age=Middle-aged       age Middle-aged
3      age=Senior       age      Senior

includes extended transaction information - examples:
  transactionID
1             1
2             2
3             3


# 2-5 신뢰도 80%, 지지도 10% 적용된 연관규칙 발견   
# 신뢰도 80%, 지지도 10%를 적용하여 연관규칙을 생성하면 6,137개의 규칙 발견
> ar<- apriori(Adult, parameter = list(supp=0.1, conf=0.8))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target
        0.8    0.1    1 none FALSE            TRUE       5     0.1      1     10  rules
  ext
 TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 4884 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[115 item(s), 48842 transaction(s)] done [0.07s].
sorting and recoding items ... [31 item(s)] done [0.01s].
creating transaction tree ... done [0.04s].
checking subsets of size 1 2 3 4 5 6 7 8 9 done [0.15s].
writing ... [6137 rule(s)] done [0.00s].
creating S4 object  ... done [0.02s].


# 지지도를 20%로 높인 경우 1,306개 규칙 발견
> ar1<- apriori(Adult, parameter = list(supp=0.2)) 
writing ... [1306 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

# 지지도 20%, 신뢰도 95% 높인 경우 348개 규칙 발견
> ar2<- apriori(Adult, parameter = list(supp=0.2, conf=0.95)) 
writing ... [348 rule(s)] done [0.00s].
creating S4 object  ... done [0.01s].

# 지지도 30%, 신뢰도 95% 높인 경우 124개 규칙 발견
> ar3<- apriori(Adult, parameter = list(supp=0.3, conf=0.95))
writing ... [124 rule(s)] done [0.00s].
creating S4 object  ... done [0.01s].

# 지지도 35%, 신뢰도 95% 높인 경우 67 규칙 발견
> ar4<- apriori(Adult, parameter = list(supp=0.35, conf=0.95))
writing ... [67 rule(s)] done [0.00s].
creating S4 object  ... done [0.01s].

# 지지도 40%, 신뢰도 95% 높인 경우 36 규칙 발견
> ar5<- apriori(Adult, parameter = list(supp=0.4, conf=0.95))
writing ... [36 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

# 2-6 상위 6개 규칙 보기
> inspect(head(ar5)) 
    lhs                       rhs                                 support   confidence
[1] {}                     => {capital-loss=None}                 0.9532779 0.9532779 
[2] {relationship=Husband} => {marital-status=Married-civ-spouse} 0.4034233 0.9993914 
[3] {relationship=Husband} => {sex=Male}                          0.4036485 0.9999493 
[4] {age=Middle-aged}      => {capital-loss=None}                 0.4800786 0.9504276 
[5] {income=small}         => {capital-gain=None}                 0.4849310 0.9581311 
[6] {income=small}         => {capital-loss=None}                 0.4908480 0.9698220 
    coverage  lift     count
[1] 1.0000000 1.000000 46560
[2] 0.4036690 2.181164 19704
[3] 0.4036690 1.495851 19715
[4] 0.5051185 0.997010 23448
[5] 0.5061218 1.044414 23685
[6] 0.5061218 1.017355 23974

# confidence(신뢰도) 기준 내림차순 정렬 상위 6개 출력
> inspect(head(sort(ar5, decreasing=T, by="confidence")))
    lhs                                    rhs                                   support confidence  coverage     lift count
[1] {relationship=Husband}              => {sex=Male}                          0.4036485  0.9999493 0.4036690 1.495851 19715
[2] {marital-status=Married-civ-spouse,                                                                                     
     relationship=Husband}              => {sex=Male}                          0.4034028  0.9999492 0.4034233 1.495851 19703
[3] {relationship=Husband}              => {marital-status=Married-civ-spouse} 0.4034233  0.9993914 0.4036690 2.181164 19704
[4] {relationship=Husband,                                                                                                  
     sex=Male}                          => {marital-status=Married-civ-spouse} 0.4034028  0.9993913 0.4036485 2.181164 19703
[5] {marital-status=Married-civ-spouse,                                                                                     
     sex=Male}                          => {relationship=Husband}              0.4034028  0.9901503 0.4074157 2.452877 19703
[6] {income=small}                      => {capital-loss=None}                 0.4908480  0.9698220 0.5061218 1.017355 23974

# lift(향상도) 기준 내림차순 정렬 상위 6개 출력
> inspect(head(sort(ar5, by="lift"))) 
    lhs                                    rhs                                   support confidence  coverage     lift count
[1] {marital-status=Married-civ-spouse,                                                                                     
     sex=Male}                          => {relationship=Husband}              0.4034028  0.9901503 0.4074157 2.452877 19703
[2] {relationship=Husband}              => {marital-status=Married-civ-spouse} 0.4034233  0.9993914 0.4036690 2.181164 19704
[3] {relationship=Husband,                                                                                                  
     sex=Male}                          => {marital-status=Married-civ-spouse} 0.4034028  0.9993913 0.4036485 2.181164 19703
[4] {relationship=Husband}              => {sex=Male}                          0.4036485  0.9999493 0.4036690 1.495851 19715
[5] {marital-status=Married-civ-spouse,                                                                                     
     relationship=Husband}              => {sex=Male}                          0.4034028  0.9999492 0.4034233 1.495851 19703
[6] {income=small}                      => {capital-gain=None}                 0.4849310  0.9581311 0.5061218 1.044414 23685


# 2-7 시각화
# 지지도 30%, 신뢰도 96%(supp=0.3, conf=0.95)에 의해서 생성된 124개의 연관규칙
# 지나치게 규칙이 많아서 가장 최적의 규칙 100개만 지원하다는' 경고 출력
# 5만 달러 이상의 연봉 수령자와 관련된 연관어는 주당 근무시간(hours-per-week)
# 형태는 정규직(Full-time, 인종(race)은 백인, 국가(native-country)는 미국
# 자본손실(capital-loss)는 없음, 직업(workclass)는 자영업(private)
# 나이(age)는 중년, 교육수준(Eduction)은 고졸(HS-grad)
# 결혼 여부는 기혼(Married-civ-spouse)
> install.packages("arulesViz") 
> library(arulesViz) 
> plot(ar3, method='graph', control=list (type='items'))


# 3 식료품매장 판매
# Groceries 데이터 셋은 1개월 동안 실제 지역 식료품매장에서 판매되는 트랜잭션 데이터를 포함
# 전체 9,835개의 트랜잭션(transaction)과 항목(item) 169 범주를 포함
> library(arules)
> data("Groceries") 
> str(Groceries)
Formal class 'transactions' [package "arules"] with 3 slots
  ..@ data       :Formal class 'ngCMatrix' [package "Matrix"] with 5 slots
  .. .. ..@ i       : int [1:43367] 13 60 69 78 14 29 98 24 15 29 ...
  .. .. ..@ p       : int [1:9836] 0 4 7 8 12 16 21 22 27 28 ...
  .. .. ..@ Dim     : int [1:2] 169 9835
  .. .. ..@ Dimnames:List of 2
  .. .. .. ..$ : NULL
  .. .. .. ..$ : NULL
  .. .. ..@ factors : list()
  ..@ itemInfo   :'data.frame':	169 obs. of  3 variables:
  .. ..$ labels: chr [1:169] "frankfurter" "sausage" "liver loaf" "ham" ...
  .. ..$ level2: Factor w/ 55 levels "baby food","bags",..: 44 44 44 44 44 44 44 42 42 41 ...
  .. ..$ level1: Factor w/ 10 levels "canned food",..: 6 6 6 6 6 6 6 6 6 6 ...
  ..@ itemsetInfo:'data.frame':	0 obs. of  0 variables

# data.frame으로 형 변환
> Groceries
transactions in sparse format with
 9835 transactions (rows) and
 169 items (columns)
 
> Groceries.df<- as(Groceries, "data.frame")
> head(Groceries.df)
                                                                  items
1              {citrus fruit,semi-finished bread,margarine,ready soups}
2                                        {tropical fruit,yogurt,coffee}
3                                                          {whole milk}
4                         {pip fruit,yogurt,cream cheese ,meat spreads}
5 {other vegetables,whole milk,condensed milk,long life bakery product}
6                      {whole milk,butter,yogurt,rice,abrasive cleaner}

# 지지도 0.001, 신뢰도 0.8 적용 규칙 발견
# 410개 규칙 발견
> rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.8))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support
        0.8    0.1    1 none FALSE            TRUE       5   0.001
 minlen maxlen target  ext
      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 9 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[169 item(s), 9835 transaction(s)] done [0.01s].
sorting and recoding items ... [157 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 5 6 done [0.01s].
writing ... [410 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

# 규칙을 구성하는 왼쪽(LHS) -> 오른쪽(RHS)의 item 빈도수 보기
# 하나의 규칙은 A상품->B상품 형태로 표현
# 왼쪽에 있는 A상품은 LHS표현
# 오른쪽에 있는 B상품은 RHS로 표현
# B상품의 빈도수가 가장 높은 것은 whole milk(진지유:지방을 제거하지 않는 우유)
# 두번째로는 기타 야체(other vegetables) 로 나타남
> library(arulesViz)
> plot(rules, method="grouped")

# 최대 길이 3이하 규칙 생성
# 규칙을 구성하는 LHS와 RHS 길이를 합쳐서 3 이하의 길이를 갖는 규칙만 생성하면
# 규칙의 수가 29개로 현저하게 줄어듬
# 경고메시지는 규착의 아이템 길이가 3개 이하인 규칙만 반환하고 멈추었다는 의미
> rules <- apriori(Groceries, parameter=list(supp=0.001, conf=0.80, maxlen=3))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen
        0.8    0.1    1 none FALSE            TRUE       5   0.001      1
 maxlen target  ext
      3  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 9 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[169 item(s), 9835 transaction(s)] done [0.02s].
sorting and recoding items ... [157 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [29 rule(s)] done [0.00s].

> inspect(rules)
     lhs                         rhs                    support confidence    coverage      lift count
[1]  {liquor,                                                                                         
      red/blush wine}         => {bottled beer}     0.001931876  0.9047619 0.002135231 11.235269    19
[2]  {curd,                                                                                           
      cereals}                => {whole milk}       0.001016777  0.9090909 0.001118454  3.557863    10
      

# confidence(신뢰도) 기준 내림차순으로 규칙 정렬
> rules <- sort(rules, decreasing=T, by="confidence")
> inspect(rules) 
     lhs                         rhs                    support confidence    coverage      lift count
[1]  {rice,                                                                                           
      sugar}                  => {whole milk}       0.001220132  1.0000000 0.001220132  3.913649    12
[2]  {canned fish,                                                                                    
      hygiene articles}       => {whole milk}       0.001118454  1.0000000 0.001118454  3.913649    11

# 발견된 규칙 시각화
# 지지도 1%와 신뢰도 80%를 적용하고, 규칙의 항목 수를 3이하로 지정했을 때 29개의 규칙 생성
# whole milk(전지유)와 other vegetables 단어를 중심으로 연관어 형성됨
# supp=0.001, conf=0.80
> library(arulesViz)
> plot(rules, method="graph", control=list(type="items"))

# 오른쪽 item이 전지분유(whole milk)인 규칙만 서브셋으로 작성
# 연관 네트워크 그래프
> wmilk <- subset(rules, rhs %in% 'whole milk')
> wmilk
set of 18 rules 
> inspect(wmilk)
> plot(wmilk, method="graph")

# 오른쪽 item이 other vegetables인 규칙만 서브셋으로 작성
> oveg <- subset(rules, rhs %in% 'other vegetables')
> oveg
set of 10 rules 
> plot(oveg, method="graph")

# 오른쪽 item이 other vegetables인 규칙만 서브셋으로 작성
> veg <- subset(rules, rhs %pin% 'vegetables') 
> veg 
set of 10 rules 
> plot(oveg, method="graph")

# 왼쪽 item이 butter or yogurt인 규칙만 서브 셋으로 작성
> butter_yog <- subset(rules, lhs %in% c('butter', 'yogurt'))
> butter_yog
set of 4 rules 
> plot(butter_yog, method="graph")


