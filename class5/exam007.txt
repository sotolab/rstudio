# 연관분석

# 1 트랜잭션 객체 생성
> install.packages("arules")
> library(arules)
> setwd("C:/workspace/rstudio-master/data")
> tran<- read.transactions("018tran.txt", format="basket", sep=",")
> tran
transactions in sparse format with
 6 transactions (rows) and
 5 items (columns)
> inspect(tran)
    items           
[1] {라면,맥주,우유}
[2] {고기,라면,우유}
[3] {고기,과일,라면}
[4] {고기,맥주,우유}
[5] {고기,라면,우유}
[6] {과일,우유}     
> 

# 2 규칙발견 1
# 지지도가 0.3이고 신뢰도가 0.1인 경우에는 16개의 규칙이 발견됨
> rule<- apriori(tran, parameter = list(supp=0.3, conf=0.1))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support
        0.1    0.1    1 none FALSE            TRUE       5     0.3
 minlen maxlen target  ext
      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 1 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[5 item(s), 6 transaction(s)] done [0.00s].
sorting and recoding items ... [5 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [16 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].
> inspect(rule)
     lhs            rhs    support   confidence coverage  lift  count
[1]  {}          => {과일} 0.3333333 0.3333333  1.0000000 1.000 2    
[2]  {}          => {맥주} 0.3333333 0.3333333  1.0000000 1.000 2    
[3]  {}          => {고기} 0.6666667 0.6666667  1.0000000 1.000 4    
[4]  {}          => {라면} 0.6666667 0.6666667  1.0000000 1.000 4    
[5]  {}          => {우유} 0.8333333 0.8333333  1.0000000 1.000 5    
[6]  {맥주}      => {우유} 0.3333333 1.0000000  0.3333333 1.200 2    
[7]  {우유}      => {맥주} 0.3333333 0.4000000  0.8333333 1.200 2    
[8]  {고기}      => {라면} 0.5000000 0.7500000  0.6666667 1.125 3    
[9]  {라면}      => {고기} 0.5000000 0.7500000  0.6666667 1.125 3    
[10] {고기}      => {우유} 0.5000000 0.7500000  0.6666667 0.900 3    
[11] {우유}      => {고기} 0.5000000 0.6000000  0.8333333 0.900 3    
[12] {라면}      => {우유} 0.5000000 0.7500000  0.6666667 0.900 3    
[13] {우유}      => {라면} 0.5000000 0.6000000  0.8333333 0.900 3    
[14] {고기,라면} => {우유} 0.3333333 0.6666667  0.5000000 0.800 2    
[15] {고기,우유} => {라면} 0.3333333 0.6666667  0.5000000 1.000 2    
[16] {라면,우유} => {고기} 0.3333333 0.6666667  0.5000000 1.000 2    


# 3 규칙발견 2
# 지지도가 0.1이고 신뢰도가 0.1인 경우에는 35개의 규칙이 발견됨
> rule<- apriori(tran, parameter = list(supp=0.1, conf=0.1))
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support
        0.1    0.1    1 none FALSE            TRUE       5     0.1
 minlen maxlen target  ext
      1     10  rules TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 0 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[5 item(s), 6 transaction(s)] done [0.00s].
sorting and recoding items ... [5 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 done [0.00s].
writing ... [35 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

# 맥주->고기 조합의 거래는 연관규칙 결과에서,
# [12] {맥주} => {고기} 0.1666667 0.5000000  0.3333333 0.750 1  
# [30] {라면,맥주} => {우유} 0.1666667 1.0000000  0.1666667 1.200 1   
# 맥주와 고기의 조합은 다른 거래에 비해서 거래 수가 비교적 적음(지지율이 낮음)
# [16] 맥주와 우유 0.33와 고기와 라면 0.5의 지지율에 비해서 휠씬 약한 조합
# 향상도가 0.75라는 것은 맥주와 고기가 서로 음의 상관관계라고 할 수 있음
# 이것은 맥주를 구해만 사람은 대체로 고기를 사지 않는다는 사실임
# 맥주와 고기는 구매의 관련성이 떨어지기 때문에 두 상품은 근거리에 두지 않아도 됨
# [30] {라면,맥주} => {우유} 조합은향상도(1.2)가 1 이상으로 나타났기 때문에 
# 두 상품 간의 상관성이 높다고 볼 수 있음
> inspect(rule)
     lhs            rhs    support   confidence coverage  lift  count
[1]  {}          => {과일} 0.3333333 0.3333333  1.0000000 1.000 2    
[2]  {}          => {맥주} 0.3333333 0.3333333  1.0000000 1.000 2    
[3]  {}          => {고기} 0.6666667 0.6666667  1.0000000 1.000 4    
[4]  {}          => {라면} 0.6666667 0.6666667  1.0000000 1.000 4    
[5]  {}          => {우유} 0.8333333 0.8333333  1.0000000 1.000 5    
[6]  {과일}      => {고기} 0.1666667 0.5000000  0.3333333 0.750 1    
[7]  {고기}      => {과일} 0.1666667 0.2500000  0.6666667 0.750 1    
[8]  {과일}      => {라면} 0.1666667 0.5000000  0.3333333 0.750 1    
[9]  {라면}      => {과일} 0.1666667 0.2500000  0.6666667 0.750 1    
[10] {과일}      => {우유} 0.1666667 0.5000000  0.3333333 0.600 1    
[11] {우유}      => {과일} 0.1666667 0.2000000  0.8333333 0.600 1    
[12] {맥주}      => {고기} 0.1666667 0.5000000  0.3333333 0.750 1    
...   
[16] {맥주}      => {우유} 0.3333333 1.0000000  0.3333333 1.200 2 
...
[18] {고기}      => {라면} 0.5000000 0.7500000  0.6666667 1.125 3    
...
[30] {라면,맥주} => {우유} 0.1666667 1.0000000  0.1666667 1.200 1    
...  

# 4 트랜잭션 생성
# read.transactions 트랜잭션 객체 생성 함수
# format: 트랜잭션 데이터 셋의 형식 지정
# single: 트랜잭션 구분자에 의해서 상품이 대응된 경우
# basket: 여러 개의 상품으로 구성된 경우(transaction ID없이 여러 상품으로만 구성된 경우)
# sep: 각 상품을 구분하는 구분자 지정
# cols: single인 경우 읽을 칼럼 수 지정
# rm.duplicates: 중복 트랜잭션 상품 제거
# encoding: 데이터 셋의 인코딩 지정
> setwd("C:/workspace/rstudio-master/data")
> stran <- read.transactions("019items.txt",format="single",cols=c(1,2)) 
> inspect(stran)
    items         transactionID
[1] {item1}       trans1       
[2] {item1,item2} trans2       
>

# 상품이 콤마로 구분되어 있으며, 중복된 트랜잭션이 존재하는 경우 해당 트랜잭션을 제거
> stran2<- read.transactions("020single_format.csv", format="single", sep=",", 
+ cols=c(1,2), rm.duplicates=T)
> stran2
transactions in sparse format with
 248 transactions (rows) and
 68 items (columns)
> inspect(stran2)

# 요약통계량
# sizes의 첫 줄은 item수, 두 번째 줄은 transaction 수
# item 수가 1개로 구성된 transaction 수가 12개라는 의미
# 248개 transaction에 대한 기술통계 제공
> summary(stran2)
transactions as itemMatrix in sparse format with
 248 rows (elements/itemsets/transactions) and
 68 columns (items) and a density of 0.06949715 

most frequent items:
10001519 10003364 10003373 10093119 10003332  (Other) 
     186      183       91       84       71      557 

element (itemset/transaction) length distribution:
sizes
  1   2   3   4   5   6   7   8 
 12  25  16  20 119  12  37   7 

   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  1.000   4.000   5.000   4.726   5.000   8.000 

includes extended item information - examples:
    labels
1 10000005
2 10000012
3 10000085

includes extended transaction information - examples:
    transactionID
1 2010-01-01-0823
2 2010-01-02-0822
3 2010-01-03-0822

> inspect(stran2)

# 규칙 생성
# 지지율 0.1, 신뢰도 0.8 
> astran2 <- apriori(stran2) 
Apriori

Parameter specification:
 confidence minval smax arem  aval originalSupport maxtime support minlen maxlen target
        0.8    0.1    1 none FALSE            TRUE       5     0.1      1     10  rules
  ext
 TRUE

Algorithmic control:
 filter tree heap memopt load sort verbose
    0.1 TRUE TRUE  FALSE TRUE    2    TRUE

Absolute minimum support count: 24 

set item appearances ...[0 item(s)] done [0.00s].
set transactions ...[68 item(s), 248 transaction(s)] done [0.00s].
sorting and recoding items ... [12 item(s)] done [0.00s].
creating transaction tree ... done [0.00s].
checking subsets of size 1 2 3 4 5 done [0.00s].
writing ... [102 rule(s)] done [0.00s].
creating S4 object  ... done [0.00s].

> astran2
set of 102 rules 

> attributes(astran2)
$quality
      support confidence  coverage     lift count
1   0.1088710  0.8181818 0.1330645 1.108793    27
2   0.1088710  0.8181818 0.1330645 1.090909    27
3   0.1330645  1.0000000 0.1330645 1.355191    33
4   0.1330645  1.0000000 0.1330645 1.333333    33
...
101 0.1048387  1.0000000 0.1048387 2.952381    26
102 0.1048387  1.0000000 0.1048387 4.509091    26
...
$class
[1] "rules"
attr(,"package")
[1] "arules"

> inspect(astran2)
      lhs                                      rhs        support   confidence coverage 
[1]   {10003349}                            => {10003364} 0.1088710 0.8181818  0.1330645
[2]   {10003349}                            => {10001519} 0.1088710 0.8181818  0.1330645
[3]   {10202857}                            => {10003364} 0.1330645 1.0000000  0.1330645
...
[102] 4.509091  26  

# 상위 5개의 향상도를 내림차순
> inspect(head(sort(astran2, by="lift")))
    lhs                                      rhs        support   confidence coverage 
[1] {10003332,10003373}                   => {10003374} 0.1330645 0.9705882  0.1370968
[2] {10003332,10003364,10003373}          => {10003374} 0.1330645 0.9705882  0.1370968
[3] {10001519,10003332,10003373}          => {10003374} 0.1330645 0.9705882  0.1370968
[4] {10001519,10003332,10003364,10003373} => {10003374} 0.1330645 0.9705882  0.1370968
[5] {10003332,10093119}                   => {10003375} 0.1048387 1.0000000  0.1048387
[6] {10003332,10003364,10093119}          => {10003375} 0.1048387 1.0000000  0.1048387
    lift     count
[1] 4.912365 33   
[2] 4.912365 33   
[3] 4.912365 33   
[4] 4.912365 33   
[5] 4.509091 26   
[6] 4.509091 26   
> 

