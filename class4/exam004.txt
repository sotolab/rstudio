# 실시간 뉴스 수집과 분석

# 1 httr, XML 패키지 설치 및 준비
> install.packages("httr")
> library(XML)
> url <- "http://media.daum.net"
> web <- GET(url)
> web

# 2 news 자료 수집
> html <- htmlTreeParse(web, useInternalNodes = T, trim = T, encoding = "utf-8")
> rootNode <- xmlRoot(html)
> news <- xpathSApply(rootNode, "//a[@class = 'link_txt']", xmlValue)
> news

# 3 전처리 과정
# \\d+: 숫자 제거
# [\r\n\t] : 이스케이프 제거
# [:punct:] : 문장부호 제거
# [:cntrl:] : 특수문자 제거
# [a-z]+ : 소문자 제거
# [A-Z]+ : 대문자 제거
# \\s+ : 2개 이상 공백 교체
# news_pre[1:24] : 필요한 부분만 가져옴
> news_pre <- gsub("[\r\n\t]", ' ', news)
> news_pre <- gsub('[[:punct:]]', ' ', news_pre)
> news_pre <- gsub('[[:cntrl:]]', ' ', news_pre)
> news_pre <- gsub('[a-z]+', ' ', news_pre)
> news_pre <- gsub('[A-Z]+', ' ', news_pre)
> news_pre <- gsub('\\s+', ' ', news_pre)
> news_pre

# 4 파일로 저장 및 불러오기
> setwd("C:/workspace/rstudio-master/data")
> news_data <- news_pre[1:24]
> news_data
> write.csv(news_data, "news_data.csv", quote = F)
> news_data <- read.csv("news_data.csv", header = T, stringsAsFactors = F)
> str(news_data)
> names(news_data) <- c("no", "news_text")
> head(news_data)
  no                                               news_text
1  1 문 대통령 우리 경제 확연한 성장세 내년 상반기 정상궤도 
> news_text <- news_data$news_text
> news_text

# 5 토픽 분석
# 세종 단어 사전에 추가
> user_dic <- data.frame(term = c("펜데믹", "코로나19", "타다"), tag = 'ncn')
> buildDictionary(ext_dic = 'sejong', user_dic = user_dic)

# 사용자 함수 정의
> exNouns <- function(x) { paste(extractNoun(x), collapse = " ")}
> news_nouns <- sapply(news_text, exNouns)
> news_nouns

# 말뭉치(corpus) 생성
> library("tm")
> newsCorpus <- Corpus(VectorSource(news_nouns))
> newsCorpus
> inspect(newsCorpus[1:5]) 

# 집계 행렬 생성
# 2~8 음절 단어 대상 단어/문서 집계 행렬
> TDM <- TermDocumentMatrix(newsCorpus, control = list(wordLengths = c(4, 16)))
> TDM
<<TermDocumentMatrix (terms: 123, documents: 24)>>
Non-/sparse entries: 152/2800
Sparsity           : 95%
Maximal term length: 5
Weighting          : term frequency (tf)
> 

# matrix 자료구조를 data.frame 자료구조로 변경
> tdm.df <- as.data.frame(as.matrix(TDM))
> dim(tdm.df)
[1] 123  24
> 

# 단어 출현 빈도수 구하기 
> wordResult <- sort(rowSums(tdm.df), decreasing = TRUE)
> wordResult[1:10]
  경제   내년 대통령   정상   통합   행정 트럼프   대선 상반기 성장세 
     4      3      3      3      3      3      3      3      2      2 
> 
>





